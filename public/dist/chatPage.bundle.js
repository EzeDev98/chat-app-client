/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/src/chatPage.js":
/*!********************************!*\
  !*** ./public/src/chatPage.js ***!
  \********************************/
/***/ (() => {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  const searchResultContainer = document.getElementById(\"search-results-container\");\n  const searchInput = document.getElementById(\"auto-search-user\");\n  const submitButton = document.getElementById(\"submit\");\n\n  let receiver = null;\n\n  // Get the current user from the URL parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const currentUser = urlParams.get(\"user\");\n\n  // Check if the currentUser is retrieved from URL parameters\n  if (currentUser) {\n    console.log(\"Current user found, connecting to WebSocket...\");\n    connectToWebSocket(currentUser);\n  } else {\n    alert(\"No user found. Please log in to continue.\");\n    console.log(\"No currentUser found in URL.\");\n  }\n\n  // Debounce function to limit API calls\n  function debounce(func, delay) {\n    let timeout;\n    return function (...args) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(this, args), delay);\n    };\n  }\n\n  // Search input listener with debounce\n  if (searchInput) {\n    searchInput.addEventListener(\"keyup\", debounce(searchUser, 400));\n  }\n\n  // Function to search users\n  function searchUser() {\n    const query = searchInput.value.trim();\n\n    if (query.length >= 2) {\n      fetch(`http://localhost:3030/api/v1/search-user?name=${encodeURIComponent(query)}`)\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n          }\n          return response.json();\n        })\n        .then((data) => displaySearchResults(data))\n        .catch((error) => {\n          console.error(\"Error fetching user:\", error);\n          searchResultContainer.innerHTML = \"<p>Error fetching users. Please try again later.</p>\";\n          searchResultContainer.style.display = \"block\";\n        });\n    } else {\n      clearSearchResults();\n    }\n  }\n\n  // Function to clear search results\n  function clearSearchResults() {\n    searchResultContainer.innerHTML = \"\";\n    searchResultContainer.style.display = \"none\";\n  }\n\n  // Function to display search results\n  function displaySearchResults(users) {\n    clearSearchResults();\n\n    if (users.length === 0) {\n      searchResultContainer.innerHTML = \"<p>No users found</p>\";\n      searchResultContainer.style.display = \"block\";\n      return;\n    }\n\n    users.forEach((user) => {\n      const chatLink = createChatLink(user);\n      searchResultContainer.appendChild(chatLink);\n\n      chatLink.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        searchedReceiver(user);\n        focusMessageInput();\n      });\n    });\n\n    searchResultContainer.style.display = \"block\";\n  }\n\n  // Function to update the selected receiver\n  function searchedReceiver(user) {\n    receiver = user;\n    console.log(\"Receiver: \", receiver.username);\n  }\n\n  // Function to create a chat link\n  function createChatLink(user) {\n    const chatLink = document.createElement(\"a\");\n    chatLink.href = \"#\";\n    chatLink.classList.add(\"chat-link\");\n\n    const chatDesc = document.createElement(\"div\");\n    chatDesc.classList.add(\"chat-desc\");\n\n    const imageDiv = document.createElement(\"div\");\n    imageDiv.classList.add(\"image\");\n\n    const userImage = document.createElement(\"img\");\n    userImage.src = user.imageUrl || \"../chat-images/1.jpeg\";\n    userImage.alt = `${user.username}'s profile picture`;\n\n    imageDiv.appendChild(userImage);\n\n    const nameDiv = document.createElement(\"div\");\n    nameDiv.classList.add(\"name\");\n\n    const userName = document.createElement(\"h3\");\n    userName.textContent = user.username || \"John Doe\";\n\n    const lastMessage = document.createElement(\"h4\");\n    lastMessage.textContent = user.lastMessage || \"No message\";\n\n    nameDiv.appendChild(userName);\n    nameDiv.appendChild(lastMessage);\n\n    chatDesc.appendChild(imageDiv);\n    chatDesc.appendChild(nameDiv);\n\n    const timeDiv = document.createElement(\"div\");\n    timeDiv.classList.add(\"time\");\n\n    const time = document.createElement(\"h3\");\n    time.textContent = user.time || \"1:30 pm\";\n\n    const volumeIcon = document.createElement(\"i\");\n    volumeIcon.classList.add(\"fa\", \"fa-volume-up\");\n    volumeIcon.setAttribute(\"aria-hidden\", \"true\");\n\n    timeDiv.appendChild(time);\n    timeDiv.appendChild(volumeIcon);\n\n    chatLink.appendChild(chatDesc);\n    chatLink.appendChild(timeDiv);\n\n    return chatLink;\n  }\n\n  // Function to focus on the message input\n  function focusMessageInput() {\n    const chatMessageContainer = document.querySelector(\".message-foot\");\n\n    if (chatMessageContainer) {\n      chatMessageContainer.scrollIntoView({ behavior: \"smooth\" });\n\n      const inputBox = document.querySelector(\"#send-message\");\n\n      if (inputBox) {\n        inputBox.focus();\n      }\n    }\n  }\n\n  // Function to connect to WebSocket and set up event handlers\n  function connectToWebSocket(currentUser) {\n    let socket = new SockJS(\"http://localhost:3030/chat\");\n    let stompClient = Stomp.over(socket);\n\n    stompClient.connect({ username: currentUser }, onConnected, onError);\n\n    function onError(error) {\n      console.error(\"Could not connect to WebSocket server. Please refresh this page to try again!: \" + error);\n    }\n\n    function onConnected() {\n      \n      stompClient.subscribe(`/user/${currentUser}/queue/messages`, (message) => {\n        showMessage(JSON.parse(message.body));\n      });\n\n      // Subscribe to general chat messages\n      stompClient.subscribe(\"/queue/messages\", (message) => {\n        showMessage(JSON.parse(message.body));\n      });\n    }\n\n    // Function to send a message\n    function sendMessage() {\n      const messageContent = document.getElementById(\"send-message\").value;\n\n      if (messageContent && stompClient && receiver) {\n        const chatMessage = {\n          sender: currentUser,\n          receiver: receiver.username,\n          message: messageContent,\n          time: new Date().toLocaleTimeString(),\n        };\n\n        stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n\n        document.getElementById(\"send-message\").value = \"\";\n      } else if (!receiver || !receiver.username) {\n        alert(\"Please search for a user to chat with\");\n        console.log(\"Message receiver not selected\");\n      }\n    }\n\n    // Send message on button click\n    if (submitButton) {\n      submitButton.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        sendMessage();\n      });\n    }\n  }\n\n  // Function to display a message in the chat window\n  function showMessage(message) {\n    const chatContainer = document.getElementById(\"chat-container\");\n\n    const isSender = message.sender === currentUser;\n    const isReceiver = message.sender === receiver?.username || message.receiver === currentUser;\n\n    const messageElement = document.createElement(\"div\");\n\n    if (isSender) {\n      messageElement.classList.add(\"message-contents-sender\");\n    } else if (isReceiver) {\n      messageElement.classList.add(\"message-contents-receiver\");\n    }\n\n    const messageContent = `\n      <div class=\"missive ${isSender ? \"sender-message\" : \"receiver-message\"}\">\n        <h6>${message.message}</h6>\n        <h5>${message.time}</h5>\n      </div>\n    `;\n\n    messageElement.innerHTML = messageContent;\n\n    chatContainer.appendChild(messageElement);\n\n    // Scroll to the bottom for the latest message\n    chatContainer.scrollTop = chatContainer.scrollHeight;\n\n    if (!isSender) {\n      addSenderToSearchResult(message.sender);\n    }\n  }\n\n  // Function to add the sender to the search results\n  function addSenderToSearchResult(senderUserName) {\n    fetch(`http://localhost:3030/api/v1/search-user?name=${encodeURIComponent(senderUserName)}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`Server error: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((users) => {\n        if (users.length > 0) {\n          const sender = users.find((user) => user.username === senderUserName);\n\n          if (!sender) {\n            console.log(\"Sender not found in search result\");\n            return;\n          }\n\n          // Check if the sender is already in the search results\n          const existingUser = Array.from(document.querySelectorAll(\".chat-link\"))\n            .find((link) => link.querySelector(\"h3\").textContent === sender.username);\n\n          console.log(\"Existing user: \", existingUser);\n\n          if (!existingUser) {\n            console.log(\"Adding sender to search results:\", sender.username);\n            displaySearchResults([sender]);\n          } else {\n            console.log(\"Sender is already in search results\");\n          }\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching sender details:\", error);\n      });\n  }\n});\n\n\n// document.addEventListener(\"DOMContentLoaded\", () => {\n//   const searchResultContainer = document.getElementById(\"search-results-container\");\n//   const searchInput = document.getElementById(\"auto-search-user\");\n//   const submitButton = document.getElementById(\"submit\");\n\n//   let receiver = null;\n\n//   // Get the current user from the URL parameters\n//   const urlParams = new URLSearchParams(window.location.search);\n//   const currentUser = urlParams.get(\"user\");\n\n//   console.log(\"Current user: \", currentUser);\n\n//   // Check if the currentUser is retrieved from URL parameters\n//   if (currentUser) {\n//     console.log(\"Current user found, connecting to WebSocket...\");\n//     connectToWebSocket(currentUser);\n//   } else {\n//     alert(\"No user found. Please log in to continue.\");\n//     console.log(\"No currentUser found in URL.\");\n//     console.log(\"User not found.\");\n//   }\n\n//   // Debounce function to limit API calls\n//   function debounce(func, delay) {\n//     let timeout;\n//     return function (...args) {\n//       clearTimeout(timeout);\n//       timeout = setTimeout(() => func.apply(this, args), delay);\n//     };\n//   }\n\n//   // Search input listener with debounce\n//   if (searchInput) {\n//     searchInput.addEventListener(\"keyup\", debounce(searchUser, 400));\n//   }\n\n//   // Function to search users\n//   function searchUser() {\n//     const query = searchInput.value.trim();\n\n//     if (query.length >= 2) {\n//       fetch(\n//         `http://localhost:3030/api/v1/search-user?name=${encodeURIComponent(query)}`\n//       )\n//         .then((response) => {\n//           if (!response.ok) {\n//             throw new Error(`Server error: ${response.status}`);\n//           }\n//           return response.json();\n//         })\n//         .then((data) => displaySearchResults(data))\n//         .catch((error) => {\n//           console.error(\"Error fetching user:\", error);\n//           searchResultContainer.innerHTML =\n//             \"<p>Error fetching users. Please try again later.</p>\";\n//           searchResultContainer.style.display = \"block\";\n//         });\n//     } else {\n//       clearSearchResults();\n//     }\n//   }\n\n\n//   function addSenderToSearchResult(senderUserName) {\n//       fetch(`http://localhost:3030/api/v1/search-user?name=${encodeURIComponent(senderUserName)}`)\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(`Server error: ${response.status}`);\n//         }\n//         return response.json();\n//       })\n//       .then((users) => {\n//         if (users.length > 0) {\n//           const sender = users.find(user => user.username === senderUserName);\n\n//           if (!sender) {\n//             console.log(\"Sender not found in search result\");\n//             return;\n//           }\n\n//           // Check if the sender is already in the search results\n//           const existingUser = Array.from(document.querySelectorAll(\".chat-link\"))\n//           .find(link => link.querySelector(\"h3\").textContent === sender.username);\n\n//           console.log(\"Existing user: \", existingUser);\n\n//           if (!existingUser) {\n//             console.log(\"Adding sender to search results:\", sender.username);\n//               displaySearchResults([sender]);\n//           } else {\n//             console.log(\"Sender is already in search results\");\n//           }\n\n//         }\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching sender details:\", error);\n//       });\n//   }\n\n//   // Clear search results\n//   function clearSearchResults() {\n//     searchResultContainer.innerHTML = \"\";\n//     searchResultContainer.style.display = \"none\";\n//   }\n\n//   // Function to display search results\n//   function displaySearchResults(users) {\n//     clearSearchResults();\n\n//     if (users.length === 0) {\n//       searchResultContainer.innerHTML = \"<p>No users found</p>\";\n//       searchResultContainer.style.display = \"block\";\n//       return;\n//     }\n\n//     users.forEach((user) => {\n//       const chatLink = createChatLink(user);\n//       searchResultContainer.appendChild(chatLink);\n\n//       chatLink.addEventListener(\"click\", (event) => {\n//         event.preventDefault();\n//         searchedReceiver(user);\n//         focusMessageInput();\n//       });\n//     });\n\n//     searchResultContainer.style.display = \"block\";\n//   }\n\n//   function searchedReceiver(user) {\n//     receiver = user;\n//     console.log(\"Receiver: \", receiver.username);\n//   }\n\n//   // Function to create a chat link\n//   function createChatLink(user) {\n//     const chatLink = document.createElement(\"a\");\n//     chatLink.href = \"#\";\n//     chatLink.classList.add(\"chat-link\");\n\n//     const chatDesc = document.createElement(\"div\");\n//     chatDesc.classList.add(\"chat-desc\");\n\n//     const imageDiv = document.createElement(\"div\");\n//     imageDiv.classList.add(\"image\");\n\n//     const userImage = document.createElement(\"img\");\n//     userImage.src = user.imageUrl || \"../chat-images/1.jpeg\";\n//     userImage.alt = `${user.username}'s profile picture`;\n\n//     imageDiv.appendChild(userImage);\n\n//     const nameDiv = document.createElement(\"div\");\n//     nameDiv.classList.add(\"name\");\n\n//     const userName = document.createElement(\"h3\");\n//     userName.textContent = user.username || \"John Doe\";\n\n//     const lastMessage = document.createElement(\"h4\");\n//     lastMessage.textContent = user.lastMessage || \"No message\";\n\n//     nameDiv.appendChild(userName);\n//     nameDiv.appendChild(lastMessage);\n\n//     chatDesc.appendChild(imageDiv);\n//     chatDesc.appendChild(nameDiv);\n\n//     const timeDiv = document.createElement(\"div\");\n//     timeDiv.classList.add(\"time\");\n\n//     const time = document.createElement(\"h3\");\n//     time.textContent = user.time || \"1:30 pm\";\n\n//     const volumeIcon = document.createElement(\"i\");\n//     volumeIcon.classList.add(\"fa\", \"fa-volume-up\");\n//     volumeIcon.setAttribute(\"aria-hidden\", \"true\");\n\n//     timeDiv.appendChild(time);\n//     timeDiv.appendChild(volumeIcon);\n\n//     chatLink.appendChild(chatDesc);\n//     chatLink.appendChild(timeDiv);\n\n//     return chatLink;\n//   }\n\n//   // Function to focus on the message input\n//   function focusMessageInput() {\n//     const chatMessageContainer = document.querySelector(\".message-foot\");\n\n//     if (chatMessageContainer) {\n//       chatMessageContainer.scrollIntoView({ behavior: \"smooth\" });\n\n//       const inputBox = document.querySelector(\"#send-message\");\n\n//       if (inputBox) {\n//         inputBox.focus();\n//       }\n//     }\n//   }\n\n//   // Function to connect to WebSocket and set up the necessary event handlers\n//   function connectToWebSocket(currentUser) {\n//     let socket = new SockJS(\"http://localhost:3030/chat\");\n//     let stompClient = Stomp.over(socket);\n\n//     stompClient.connect({username : currentUser}, onConnected, onError);\n\n//     function onError(error) {\n//       console.error(\n//         \"Could not connect to WebSocket server. Please refresh this page to try again!: \" + error\n//       );\n//     }\n\n//     function onConnected() {\n\n//       console.log(\"WebSocket connected to server at: \" + socket._transport.url);\n\n//       stompClient.subscribe(\n//         `/user/${currentUser}/queue/messages`,\n//         function (message) {\n//           showMessage(JSON.parse(message.body));\n//         }\n//       );\n\n//       // Subscribe to general chat messages\n//       stompClient.subscribe(\"/queue/messages\", function (message) {\n//         showMessage(JSON.parse(message.body));\n//       });\n\n//     }\n\n//     // Send message functionality\n//     function sendMessage() {\n\n//       const messageContent = document.getElementById(\"send-message\").value;\n\n//       if (messageContent && stompClient && receiver) {\n//         const chatMessage = {\n//           sender: currentUser,\n//           receiver: receiver.username,\n//           message: messageContent,\n//           time: new Date().toLocaleTimeString(),\n//         };\n\n//         console.log(\"Sending message: \", chatMessage);\n\n//         stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n        \n//         document.getElementById(\"send-message\").value = \"\";\n        \n//       } else if (!receiver || !receiver.username) {\n//         alert(\"Please search for a user to chat with\");\n//         console.log(\"Message receiver not selected\");\n//       }\n//     }\n\n//     // Send message on button click\n//     if (submitButton) {\n//       submitButton.addEventListener(\"click\", (event) => {\n//         event.preventDefault();\n//         sendMessage();\n//       });\n//     }\n//   }\n\n//   // Function to display a message in the chat window\n//   function showMessage(message) {\n//     const chatContainer = document.getElementById(\"chat-container\");\n\n//     const isSender = message.sender === currentUser;\n//     const isReceiver = message.sender === receiver?.username || message.receiver === currentUser;\n\n//     const messageElement = document.createElement(\"div\");\n\n//     if (isSender) {\n//       messageElement.classList.add(\"message-contents-sender\");\n//     } else if (isReceiver) {\n//       messageElement.classList.add(\"message-contents-receiver\");\n//     }\n\n//     const messageContent = `\n//       <div class=\"missive ${isSender ? \"sender-message\" : \"receiver-message\"}\">\n//         <h6>${message.message}</h6>\n//         <h5>${message.time}</h5>\n//       </div>\n//     `;\n\n//     messageElement.innerHTML = messageContent;\n\n//     chatContainer.appendChild(messageElement);\n\n//     // Scroll to the bottom for the latest message\n//     chatContainer.scrollTop = chatContainer.scrollHeight;\n\n//     if (!isSender) {\n//       addSenderToSearchResult(message.sender);\n//     }\n//   }\n// });\n\n\n\n//# sourceURL=webpack://chat_application-client/./public/src/chatPage.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/src/chatPage.js"]();
/******/ 	
/******/ })()
;